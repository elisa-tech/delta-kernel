#!/usr/bin/python3
"""
The script parses the dependency list generated by patching `fixdep.c`.

This script takes three arguments:
1. The path of dependency list
2. The output path for a json file
3. The output path for the list of header files.

Usage:
    parse_json <dep_list_path> <output_json_path>
                  <output_header_file_list_path>
"""
import re
import argparse
import json

# Regular expression patterns
source_file_pattern = re.compile(r'^source file := (.+)$')

# Function to parse the input data


def parse_dependencies(dep_list_file, output_json, output_dep_list):
    """Parse dependency file generated by 'fixdep.c'."""
    dependencies = []
    dep_set = set()
    current_source_file = None

    for line in dep_list_file:
        line = line.strip()
        if not line:
            continue

        source_match = source_file_pattern.match(line)
        if source_match:
            current_source_file = source_match.group(1)
            dependencies.append({
                'source_file': current_source_file,
                'dependency_files': []
            })
        else:
            dependencies[-1]['dependency_files'].append(line)
            dep_set.add(line)

    # Write dependency list to output file
    with open(output_dep_list, 'w', encoding='utf-8') as output_list_file:
        for header_file in dep_set:
            output_list_file.write(header_file + '\n')

    # Dump dependencies into JSON file
    with open(output_json, 'w', encoding='utf-8') as json_file:
        json.dump(dependencies, json_file, indent=4)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Process dependency list generated while compiling kernel.")
    parser.add_argument('input_file', type=str,
                        help="Path to input dependency file")
    parser.add_argument('output_json', type=str,
                        help="Path to output JSON file")
    parser.add_argument('output_header_list', type=str,
                        help="Path to output dependency list file")

    args = parser.parse_args()

    with open(args.input_file, 'r', encoding='utf-8') as input_file:
        parse_dependencies(input_file, args.output_json,
                           args.output_header_list)

    print("Dependency parsing complete.")
